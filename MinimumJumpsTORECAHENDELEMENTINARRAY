Minimum Jumps
Difficulty: MediumAccuracy: 11.91%Submissions: 955K+Points: 4
You are given an array arr[] of non-negative numbers. Each number tells you the maximum number of steps you can jump forward from that position.

For example:

If arr[i] = 3, you can jump 1 step, 2 steps, or 3 steps forward from position i.
If arr[i] = 0, you cannot jump forward from that position.
Your task is to find the minimum number of jumps needed to move from the first position in the array to the last position.

Note:  Return -1 if you can't reach the end of the array.

Examples : 

Input: arr[] = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
Output: 3 
Explanation: First jump from 1st element to 2nd element with value 3. From here we jump to 5th element with value 9, and from here we will jump to the last. 
Input: arr = [1, 4, 3, 2, 6, 7]
Output: 2 
Explanation: First we jump from the 1st to 2nd element and then jump to the last element.
Input: arr = [0, 10, 20]
Output: -1
Explanation: We cannot go anywhere from the 1st element.
Constraints:
2 ≤ arr.size() ≤ 106
0 ≤ arr[i] ≤ 105



SOL 1:

class Solution {
    minJumps(arr) {
        let n = arr.length;

        // If the array length is 1, we are already at the end.
        if (n === 1) return 0;

        // If the first element is 0, we cannot move anywhere.
        if (arr[0] === 0) return -1;

        let maxReach = arr[0];  // Farthest index we can reach
        let steps = arr[0];     // Steps we can take before we need another jump
        let jumps = 1;          // At least one jump needed (starting position)

        for (let i = 1; i < n; i++) {
            // If we have reached the last index
            if (i === n - 1) return jumps;

            // Update maxReach
            maxReach = Math.max(maxReach, i + arr[i]);

            // Use one step to move forward
            steps--;

            // If steps become zero, we must jump
            if (steps === 0) {
                jumps++;  // Increase jump count

                // If we cannot reach further, return -1
                if (i >= maxReach) return -1;

                // Reset steps to the number of steps we can take from this new position
                steps = maxReach - i;
            }
        }

        return -1; // If we exit the loop, we couldn't reach the end
    }
}


Expected Approach:
Intuition:
Maintain maximum reachable index from the current index and number of steps we can jump if we jump from current index and total jump we made till now, and at every iteration reduce the steps and update the maximum reachable index if number of steps is zero that means we can't move further by using previous selected index so increase the jump count and update steps we can jump from here if new maximum reach is selected

Implementation:
If n==1 then return 0, Because in the question given that initially, we are at first index that means no need to jump if n==1. 
If arr[0]==0 the return -1, As if the value of first index is zero that means we can't make any jump from the start.
Initialize 3 variables
maxrange=arr[0]: The variable maxrange stores at all times the maximal reachable index in the array.
jump = 1: stores the number of jumps necessary to reach the maximal reachable position. It also indicates the current jump we are making in the array.
step = arr[0]: The variable step stores the number of steps we can still take in the current jump 'jump' (and is initialized with value at index 0, i.e. initial number of steps)
Now, starting iteration from index 1, the above values are updated as follows.
First, we test whether we have reached the end of the array, in that case, we just need to return the jump variable.
Now we update the maxReach. This is equal to the maximum of maxrange and i+arr[i](the number of steps we can take from the current position).
We used up a step to get to the current index, so steps have to be decreased. 
If no more steps are remaining (i.e. steps=0, then we must have used a jump. Therefore increase jump. Since we know that it is possible somehow to reach maxrange, we again initialize the steps to the number of steps to reach maxrange from position i. But before re-initializing the step, we also check whether a step is becoming zero or negative. In this case, It is not possible to reach further so return -1.

SOLUTION BY GFG , BUT ABOVE METHOD IS PREFERD
Given an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. This means if arr[i] = x, then we can jump any distance y such that y ≤ x.

Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.

Note: Return -1 if you can't reach the end of the array.

Example 1:

Input:
N = 11
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}

Output: 3

Explanation: First jump from 1st element to 2nd element with value 3. Now, from here we jump to 5th element with value 9, and from here we will jump to the last.

Example 2:

Input :
N = 6
arr = {1, 4, 3, 2, 6, 7}

Output: 2

Explanation: First we jump from the 1st to 2nd element and then jump to the last element.

Brute Force Approach:
Intuition:
Recursive Approach: A naive approach is to start from the first element and recursively call for all the elements reachable from the first element. The minimum number of jumps to reach end from first can be calculated using the minimum number of jumps needed to reach end from the elements reachable from first.

minJumps(start, end) = Min ( minJumps(k, end) ) for all k reachable from start

Implementation:
If n==1 then return 0 because we are already at the first position.
Initialize the answer with int_max.
Now run a loop from n-2 to 0
Check if from ith index we can reach the nth index or not
If yes then call recursion from start index to ith index, as we can reach from ith to nth in one step then now check if we reach to ith index or not by the recursive call.
Update the answer with minimum of answer and value returned by (recursive call)+1, as recursive call gives the count till ith index and from ith to nth index takes 1 step.
When we come out of the recursion check if ans==int_max which means we can't react till the nth index then return -1 else return answer. 

class Solution
{
    public:
    //Function to find minimum number of jumps to reach the end of the array.
    int minimumJumps(int arr[], int n)
    {
       // Base case: when source and
       // destination are same
       if (n == 1)
           return 0;
    
       // Traverse through all the points
       // reachable from arr[l]
       // Recursively, get the minimum number
       // of jumps needed to reach arr[h] from
       // these reachable points
       int ans = INT_MAX;
       for (int i = n - 2; i >= 0; i--) {
           if (i + arr[i] >= n - 1) {
               int sub_ans = minimumJumps(arr, i + 1);
               if (sub_ans != INT_MAX)
                   ans = min(ans, sub_ans + 1);
           }
       }
       return (ans==INT_MAX ? -1 : ans);
    }
};

 Examples:

Input:  arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}
Output: 3 (1-> 3 -> 8 -> 9)

Explanation: Jump from 1st element to
2nd element as there is only 1 step,
now there are three options 5, 8 or 9.
If 8 or 9 is chosen then the end node 9
can be reached. So 3 jumps are made.
Complexity :
Time complexity: O(n^n). 
There are maximum n possible ways to move from an element. So the maximum number of steps can be N^N so the upper bound of time complexity is O(n^n)
Space Complexity: O(1). There is no space required (if recursive stack space is ignored).
Note: If the execution is traced for this method, it can be seen that there will be overlapping subproblems. For example, minJumps(3, 9) will be called two times as arr[3] is reachable from arr[1] and arr[2]. So this problem has both properties (optimal substructure and overlapping subproblems) of Dynamic Programming.

Brute Optimized Approach:
Intuition:
Dynamic Programming Approach: In this way, make a jumps[] array from left to right such that jumps[i] indicate the minimum number of jumps needed to reach arr[i] from arr[0].

Implementation:
Initialize jump[] and fill it with int_max.
check if arr[0]=0 then return -1.
Update jump[0]=0, because we are already at  0th position so no need to jump to reach 0th position.
To fill the jumps array run a nested loop inner loop counter is j and the outer loop count is i.
Outer loop from 1 to n-1 and inner loop from 0 to i.
if i is less than j + arr[j] and jump[j] must not int_max that means jth position is reachable from previous indexes then set jumps[i] to minimum of jumps[i] and jumps[j] + 1.
Finally, return jumps[n-1].
Code:


class Solution
{
    public:
    //Function to find minimum number of jumps to reach the end of the array.
    
    int minimumJumps(int arr[], int n)
    {
       // jumps[n-1] will hold the result
       int jumps[n];
    
       if (arr[0] == 0)
           return -1;
    
       jumps[0] = 0;
    
       // Find the minimum number of jumps to reach arr[i]
       // from arr[0], and assign this value to jumps[i]
       for (int i = 1; i < n; i++) {
           jumps[i] = INT_MAX;
           for (int j = 0; j < i; j++) {
               if (i <= j + arr[j] && jumps[j] != INT_MAX) {
                   jumps[i] = min(jumps[i], jumps[j] + 1);
                   break;
               }
           }
       }
       return (jumps[n - 1] == INT_MAX ? -1 : jumps[n-1]);
    }
};

 Complexity:  
Time Complexity: O(n2), As we are running a nested loop.
Space Complexity: O(n), since n extra space has been taken to store the number jump needed to reach at ith index.
Expected Approach:
Intuition:
Maintain maximum reachable index from the current index and number of steps we can jump if we jump from current index and total jump we made till now, and at every iteration reduce the steps and update the maximum reachable index if number of steps is zero that means we can't move further by using previous selected index so increase the jump count and update steps we can jump from here if new maximum reach is selected


If n==1 then return 0, Because in the question given that initially, we are at first index that means no need to jump if n==1. 
If arr[0]==0 the return -1, As if the value of first index is zero that means we can't make any jump from the start.
Initialize 3 variables
maxrange=arr[0]: The variable maxrange stores at all times the maximal reachable index in the array.
jump = 1: stores the number of jumps necessary to reach the maximal reachable position. It also indicates the current jump we are making in the array.
step = arr[0]: The variable step stores the number of steps we can still take in the current jump 'jump' (and is initialized with value at index 0, i.e. initial number of steps)
Now, starting iteration from index 1, the above values are updated as follows.
First, we test whether we have reached the end of the array, in that case, we just need to return the jump variable.
Now we update the maxReach. This is equal to the maximum of maxrange and i+arr[i](the number of steps we can take from the current position).
We used up a step to get to the current index, so steps have to be decreased. 
If no more steps are remaining (i.e. steps=0, then we must have used a jump. Therefore increase jump. Since we know that it is possible somehow to reach maxrange, we again initialize the steps to the number of steps to reach maxrange from position i. But before re-initializing the step, we also check whether a step is becoming zero or negative. In this case, It is not possible to reach further so return -1.
Code:


1
// User function Template for javascript
2
​
3
/**
4
 * @param {number[]} arr
5
 * @param {number} n
6
 * @return {number}
7
 */
8
​
9
class Solution {
10
    minJumps(arr) {
11
        // The number of jumps needed to reach the starting index is 0
12
        let n = arr.length;
13
        if (n <= 1) return 0;
14
​
15
        // Return -1 if not possible to jump
16
        if (arr[0] === 0) return -1;
17
​
18
        // initialization
19
        let maxReach =
20
            arr[0];        // stores all time the maximal reachable index in the array.
21
        let step = arr[0]; // stores the number of steps we can still take
22
        let jump = 1;      // stores the number of jumps necessary to reach that maximal
23
                      // reachable position.
24
​
25
        // Start traversing array
26
        let i = 1;
27
        for (i = 1; i < n; i++) {
28
            // Check if we have reached the end of the array
29
            if (i === n - 1) return jump;
30
​
31
            // updating maxReach
32
            maxReach = Math.max(maxReach, i + arr[i]);
33
​
34
            // we use a step to get to the current index
35
            step--;
36
​
37
            // If no further steps left
38
            if (step === 0) {
39
                // we must have used a jump
40
                jump++;
41
​
42
                // Check if the current index/position or lesser index
43
                // is the maximum reach point from the previous indexes
44
                if (i >= maxReach) return -1;
45
​
46
                // re-initialize the steps to the amount
47
                // of steps to reach maxReach from position i.
48
                step = maxReach - i;
49
            }
50
        }
51
​
52
        return -1;
53
    }
54
}

















