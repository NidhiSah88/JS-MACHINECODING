Missing in Array
Difficulty: EasyAccuracy: 29.59%Submissions: 1.3MPoints: 2Average Time: 15m
You are given an array arr of size n - 1 that contains distinct integers in the range from 1 to n (inclusive). This array represents a permutation of the integers from 1 to n with one element missing. Your task is to identify and return the missing element.

Examples:

Input: arr[] = [1, 2, 3, 5]
Output: 4
Explanation: All the numbers from 1 to 5 are present except 4.
Input: arr[] = [8, 2, 4, 5, 3, 7, 1]
Output: 6
Explanation: All the numbers from 1 to 8 are present except 6.
Input: arr[] = [1]
Output: 2
Explanation: Only 1 is present so the missing element is 2.
Constraints:
1 ≤ arr.size() ≤ 106
1 ≤ arr[i] ≤ arr.size() + 1

SOL1:

class Solution {
    // Function to find the missing number in the array.
    missingNumber(arr) {
        
        // code here
        const n = arr.length + 1; // Since the array contains n-1 elements, n is the total size
  const expectedSum = (n * (n + 1)) / 2; // Sum of first n natural numbers
  const actualSum = arr.reduce((acc, num) => acc + num, 0); // Sum of elements in the array

  return expectedSum - actualSum; // The missing element


    }
}
SOL2: ALL BY GFG:
Brute force approach:
Intuition:
We can solve this problem using a brute force approach, In which we check each number from 1 to n and verify if it exists in the array.

class Solution {

    // Note that the size of the array is n-1
    int missingNumber(int arr[]) {

        // Your Code Here
      	int n = arr.length + 1;
         for(int i = 1; i<=n; i++){
             int found = 0;
             for(int j = 0; j<n-1; j++){
                 if(arr[j] == i){
                     found = 1;
                 }
             }
             
             if(found == 0){
                 return i;
             }
         }
         
         return 0;
    }
}

Complexity:
Time Complexity: O(n2), As in this we are running a loop i from 1 to n for every value of 'i' we are traversing the whole array. 
Space Complexity: O(1), As we only use the constant extra space.
Brute-optimized approach:
Intuition:
As we know that every value in the array is unique so if we sort the array then for every index i in the array its value should be equal to i+1. If it is not then we can surely say that it is our missing number.

class Solution {

    // Note that the size of the array is n-1
    int missingNumber(int n, int arr[]) {

        // Your Code Here
        Arrays.sort(arr);
        
        // Iterate through the array to find the missing number
        for (int i = 0; i < n-1; i++) {
            if (arr[i] != i + 1) {
                return i + 1;
            }
        }
        
        // If no number is missing, return n (this line should be logically unreachable in the problem constraints)
        return n;
        
    }
}
Complexity:
Time Complexity: O(nlogn), As in this O(nlogn) is for sorting the array. and O(n) to iterate over the array. which is O(nlogn)*O(n) ~ O(nlogn)
Space complexity : O(1), As we only use the constant extra space.
Expected approach:
Intuition:
The summation of the n number is (n*(n+1)/2) so we calculate this value, and then subtract every value of the array from this and you will get the value of the array which is missing. 

Implementation :
Store the value n*(n+1)/2 in the integer total.
Iterate over the array elements.
For every element subtract that element from the total.
Return total.
If the value at the index i in the array is not equal to the 'i+1', then return the 'i+1' as that is our missing number.

Code:

class Solution {
    missingNumber(arr) {
        const n = arr.length + 1;
        let xor1 = 0;
        let xor2 = 0;

        // XOR all array elements
        for (let i = 0; i < n - 1; i++) {
            xor2 ^= arr[i];
        }

        // XOR all numbers from 1 to n
        for (let i = 1; i <= n; i++) {
            xor1 ^= i;
        }

        // Missing number is the XOR of xor1 and xor2
        return xor1 ^ xor2;
    }
}


Complexity:
Time Complexity: O(n), As in this we are iterating the array.
Space complexity : O(1), As we only use the constant extra space.
Alternate Approach-1:
Intuition:
In this, we will use the xor operation. 

XOR has certain properties:

Assume (a1 ⊕ a2 ⊕ a3 ⊕ . . . ⊕ an) ⊕ (a1 ⊕ a2 ⊕ a3 ⊕ . . . ⊕ an-1) = an

Implementation :
Initialize an integer val.
Iterate from 1 to n and xor every 'i' with val.
Iterate over the array and xor every element of the array with val.
Return val

class Solution {

    // Note that the size of the array is n-1
    int missingNumber(int arr[]) {
		int n = arr.length+1;
        int val = 0;

        // XOR all numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            val = val ^ i;
        }

        // XOR all elements in the array
        for (int i = 0; i < n - 1; i++) {
            val = val ^ arr[i];
        }

        return val;
        
    }
}


Complexity:
Time Complexity: O(n), As in this O(n) is for iterating over every value from 1 to n and O(n-1) is for iterating over the array. which is O(n) + O(n-1) ~ O(n).
Space Complexity: O(1), As we only use the constant extra space.












































