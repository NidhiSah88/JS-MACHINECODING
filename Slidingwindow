# Indexes of Subarray Sum
Given an array arr[] containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value target. You need to return the 1-based indices of the leftmost and rightmost elements of this subarray. You need to find the first subarray whose sum is equal to the target.

Note: If no such array is possible then, return [-1].

Examples:

Input: arr[] = [1, 2, 3, 7, 5], target = 12
Output: [2, 4]
Explanation: The sum of elements from 2nd to 4th position is 12.
Input: arr[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15
Output: [1, 5]
Explanation: The sum of elements from 1st to 5th position is 15.
Input: arr[] = [5, 3, 4], target = 2
Output: [-1]
Explanation: There is no subarray with sum 2.
Constraints:
1 <= arr.size()<= 106
0 <= arr[i] <= 103
0 <= target <= 109


# SOLUTION BY GEEKS FOR GEEKS
// Function to find a continuous sub-array which adds up to
// a given number.
function subarraySum(arr, target) {
    let res = [];
    let n = arr.length;

    // Pick a starting point for a subarray
    for (let s = 0; s < n; s++) {
        let curr = 0;

        // Consider all ending points
        // for the picked starting point
        for (let e = s; e < n; e++) {
            curr += arr[e];
            if (curr === target) {
                res.push(s + 1);
                res.push(e + 1);
                return res;
            }
        }
    }
    // If no subarray is found
    return [-1];
}

// Driver Code
let arr = [15, 2, 4, 8, 9, 5, 10, 23];
let target = 23;
let res = subarraySum(arr, target);

console.log(res.join(' '));

#SOLUTION: METHOD1
// User function Template for javascript
/**
 * @param {number[]} arr
 * @param {number} target
 * @returns {number[]}
 */

class Solution {
    subarraySum(arr, target) {
        // code here
         let left = 0, sum = 0;

    for (let right = 0; right < arr.length; right++) {
        sum += arr[right];

        while (sum > target && left <= right) {
            sum -= arr[left];
            left++;
        }

        if (sum === target) {
            return [left + 1, right + 1]; // 1-based index
        }
    }

    return [-1];
    }
}
Explanation:
We use the Sliding Window (Two Pointers) technique to maintain a window that sums up to the target.
right expands the window by adding elements to sum.
If sum exceeds target, we increment left and subtract elements from sum until it is no longer greater than target.
If sum matches target, we return the 1-based indices [left + 1, right + 1].
If no such subarray is found, return [-1].
This solution runs in O(n) time complexity, making it efficient for large inputs.



METHOD2: 
function findSubarrayWithSum(arr, target) {
    for (let i = 0; i < arr.length; i++) {
        let sum = 0;
        for (let j = i; j < arr.length; j++) {
            sum += arr[j];
            if (sum === target) {
                return [i + 1, j + 1]; // 1-based index
            }
            if (sum > target) break; // No need to check further
        }
    }
    return [-1];
}

// Example cases
console.log(findSubarrayWithSum([1, 2, 3, 7, 5], 12)); // Output: [2, 4]
console.log(findSubarrayWithSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15)); // Output: [1, 5]
Explanation:
We use two nested loops:
The outer loop starts at each index i.
The inner loop adds elements from i onward to check if the sum reaches target.
If sum === target, we return the 1-based indices [i + 1, j + 1].
If sum > target, we break early to optimize slightly.
While this approach is simpler to understand, itâ€™s not the most efficient for large arrays. The sliding window method (previous solution) is better for large inputs (O(n) complexity). 


