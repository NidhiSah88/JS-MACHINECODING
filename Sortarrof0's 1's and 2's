Sort an array of 0's 1's and 2's

Given an array nums consisting of only 0, 1, or 2. Sort the array in non-decreasing order.
The sorting must be done in-place, without making a copy of the original array.
Examples:
Input: nums = [1, 0, 2, 1, 0]
Output: [0, 0, 1, 1, 2]

Explanation:
The nums array in sorted order has 2 zeroes, 2 ones and 1 two
Input: nums = [0, 0, 1, 1, 1]
Output: [0, 0, 1, 1, 1]
Explanation:
The nums array in sorted order has 2 zeroes, 3 ones and zero twos
SOL1:
   function  sortZeroOneTwo(nums) {
       let newArr = [];
        newArr = nums.sort((a, b) => a - b)
        for (let i = 0; i < newArr.length; i++) {
            console.log(newArr[i]);
        }
    }
  sortZeroOneTwo( [1, 0, 2, 1, 0])
SOL2:
   function  sortZeroOneTwo(nums) {
       let c0=0, c1=0, c2 = 0;
        for (let i = 0; i < nums.length; i++) {
            if(nums[i] == 0){
                c0++;
            } else if(nums[i] == 1){
                c1++;
            } else {
                c2++
            }
        }
        let idx = 0;
         for (let i = 0; i < c0; i++) {
             nums[idx++] = 0;
             console.log("0::",nums[i], idx, i);
         }
          for (let i = 0; i < c1; i++) {
             nums[idx++] = 1;
             console.log("1::",nums[i], idx, i);
         }
          for (let i = 0; i < c1; i++) {
             nums[idx++] = 2;
             console.log("2::",nums[i], idx, i);
         }
         for (let i = 0; i < nums.length; i++) {
             console.log("bh",nums[i]);
             
         }
         console.log("bh",nums.join(''));
        
        
    }


  sortZeroOneTwo( [1, 0, 2, 1, 0])








